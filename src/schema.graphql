# import * from './generated/prisma.graphql'

type SuccessMessage {
  message: String
}

type SelectRender {
  id: String!
  value: String
  label: String
  name: String
  frequency: String
}

input SelectRenderInput {
  id: String!
  value: String
  label: String
  name: String
  frequency: String
}

type Mutation {
  signup(email: String!, password: String!, name: String!): User!
  signin(email: String!, password: String!): User!
  signout: SuccessMessage
  requestReset(email: String!): SuccessMessage
  resetPassword(
    resetToken: String!
    password: String!
    confirmPassword: String!
  ): User!
  updatePermissions(permissions: [Permission], userId: ID!): User
  createEmployee(
    first_name: String!
    last_name: String!
    email: String!
    hire_date: String
    legal_id: String!
    company: String
    payroll_frequency: String
    base_salary: Float
    spouse: Boolean
  ): Employee!
  createCompany(name: String!): Company!
  updateEmployee(
    id: ID!
    first_name: String
    last_name: String
    email: String
    base_salary: Float
    company: String
  ): Employee
  createPayrollConfig(name: String!, frequency: String): PayrollConfig
  updateCompany(id: ID!, name: String!): Company
  createConfig(data: ConfigCreateInput): Config
  createPayrollType(
    name: String!
    category: String
    type: String!
    operator: String!
    order: Float
    value: Float
  ): PayrollType
  updatePayrollType(id: ID!, name: String!): PayrollType
  createPayrollRegistry(name: String, company: String, config: [SelectRenderInput]): PayrollRegistry
}

type Query {
  me: User
  users: [User]!
  employees: [Employee]!
  companiesList: [Company]!
  companies(where: CompanyWhereInput): [SelectRender]!
  employeesSelect(where: EmployeeWhereInput): [SelectRender]!
  payrollConfigSelect(where: PayrollConfigWhereInput): [SelectRender]!
  payrollTypeSelect: [SelectRender]!
}
