# source: http://chapi-planilla-prisma.herokuapp.com
# timestamp: Sun May 05 2019 17:50:54 GMT-0600 (Central Standard Time)

type AggregateCompany {
  count: Int!
}

type AggregateEmployee {
  count: Int!
}

type AggregatePayrollConfig {
  count: Int!
}

type AggregatePayrollRegistry {
  count: Int!
}

type AggregatePayrollType {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Company implements Node {
  id: ID!
  active: Boolean!
  name: String!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type CompanyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  id: ID
  active: Boolean
  name: String!
  createdBy: UserCreateOneInput!
}

"""An edge in a connection."""
type CompanyEdge {
  """The item at the end of the edge."""
  node: Company!

  """A cursor for use in pagination."""
  cursor: String!
}

type CompanyEmbedded implements Node {
  id: ID!
  active: Boolean!
  name: String!
}

input CompanyEmbeddedCreateInput {
  id: ID
  active: Boolean
  name: String!
}

input CompanyEmbeddedCreateOneInput {
  create: CompanyEmbeddedCreateInput
}

input CompanyEmbeddedUpdateDataInput {
  active: Boolean
  name: String
}

input CompanyEmbeddedUpdateOneInput {
  create: CompanyEmbeddedCreateInput
  delete: Boolean
  update: CompanyEmbeddedUpdateDataInput
  upsert: CompanyEmbeddedUpsertNestedInput
}

input CompanyEmbeddedUpdateOneRequiredInput {
  create: CompanyEmbeddedCreateInput
  update: CompanyEmbeddedUpdateDataInput
  upsert: CompanyEmbeddedUpsertNestedInput
}

input CompanyEmbeddedUpsertNestedInput {
  update: CompanyEmbeddedUpdateDataInput!
  create: CompanyEmbeddedCreateInput!
}

input CompanyEmbeddedWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyEmbeddedWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  active_ASC
  active_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyPreviousValues {
  id: ID!
  active: Boolean!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
}

input CompanyUpdateInput {
  active: Boolean
  name: String
  createdBy: UserUpdateOneRequiredInput
}

input CompanyUpdateManyMutationInput {
  active: Boolean
  name: String
}

input CompanyWhereInput {
  """Logical AND on all given filters."""
  AND: [CompanyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdBy: UserWhereInput
}

input CompanyWhereUniqueInput {
  id: ID
}

scalar DateTime

type Employee implements Node {
  id: ID!
  first_name: String!
  last_name: String!
  legal_id: String
  hire_date: DateTime
  active: Boolean!
  email: String
  base_salary: Float
  salaries: [Salary!]
  company: CompanyEmbedded
  config: PayrollConfigEmbedded
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type EmployeeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EmployeeEdge]!
  aggregate: AggregateEmployee!
}

input EmployeeCreateInput {
  id: ID
  first_name: String!
  last_name: String!
  legal_id: String
  hire_date: DateTime
  active: Boolean
  email: String
  base_salary: Float
  salaries: SalaryCreateManyInput
  company: CompanyEmbeddedCreateOneInput
  config: PayrollConfigEmbeddedCreateOneInput
  createdBy: UserCreateOneInput!
}

input EmployeeCreateManyInput {
  create: [EmployeeCreateInput!]
  connect: [EmployeeWhereUniqueInput!]
}

"""An edge in a connection."""
type EmployeeEdge {
  """The item at the end of the edge."""
  node: Employee!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EmployeeOrderByInput {
  id_ASC
  id_DESC
  first_name_ASC
  first_name_DESC
  last_name_ASC
  last_name_DESC
  legal_id_ASC
  legal_id_DESC
  hire_date_ASC
  hire_date_DESC
  active_ASC
  active_DESC
  email_ASC
  email_DESC
  base_salary_ASC
  base_salary_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EmployeePreviousValues {
  id: ID!
  first_name: String!
  last_name: String!
  legal_id: String
  hire_date: DateTime
  active: Boolean!
  email: String
  base_salary: Float
  createdAt: DateTime!
  updatedAt: DateTime!
}

input EmployeeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployeeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [EmployeeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EmployeeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  first_name: String

  """All values that are not equal to given value."""
  first_name_not: String

  """All values that are contained in given list."""
  first_name_in: [String!]

  """All values that are not contained in given list."""
  first_name_not_in: [String!]

  """All values less than the given value."""
  first_name_lt: String

  """All values less than or equal the given value."""
  first_name_lte: String

  """All values greater than the given value."""
  first_name_gt: String

  """All values greater than or equal the given value."""
  first_name_gte: String

  """All values containing the given string."""
  first_name_contains: String

  """All values not containing the given string."""
  first_name_not_contains: String

  """All values starting with the given string."""
  first_name_starts_with: String

  """All values not starting with the given string."""
  first_name_not_starts_with: String

  """All values ending with the given string."""
  first_name_ends_with: String

  """All values not ending with the given string."""
  first_name_not_ends_with: String
  last_name: String

  """All values that are not equal to given value."""
  last_name_not: String

  """All values that are contained in given list."""
  last_name_in: [String!]

  """All values that are not contained in given list."""
  last_name_not_in: [String!]

  """All values less than the given value."""
  last_name_lt: String

  """All values less than or equal the given value."""
  last_name_lte: String

  """All values greater than the given value."""
  last_name_gt: String

  """All values greater than or equal the given value."""
  last_name_gte: String

  """All values containing the given string."""
  last_name_contains: String

  """All values not containing the given string."""
  last_name_not_contains: String

  """All values starting with the given string."""
  last_name_starts_with: String

  """All values not starting with the given string."""
  last_name_not_starts_with: String

  """All values ending with the given string."""
  last_name_ends_with: String

  """All values not ending with the given string."""
  last_name_not_ends_with: String
  legal_id: String

  """All values that are not equal to given value."""
  legal_id_not: String

  """All values that are contained in given list."""
  legal_id_in: [String!]

  """All values that are not contained in given list."""
  legal_id_not_in: [String!]

  """All values less than the given value."""
  legal_id_lt: String

  """All values less than or equal the given value."""
  legal_id_lte: String

  """All values greater than the given value."""
  legal_id_gt: String

  """All values greater than or equal the given value."""
  legal_id_gte: String

  """All values containing the given string."""
  legal_id_contains: String

  """All values not containing the given string."""
  legal_id_not_contains: String

  """All values starting with the given string."""
  legal_id_starts_with: String

  """All values not starting with the given string."""
  legal_id_not_starts_with: String

  """All values ending with the given string."""
  legal_id_ends_with: String

  """All values not ending with the given string."""
  legal_id_not_ends_with: String
  hire_date: DateTime

  """All values that are not equal to given value."""
  hire_date_not: DateTime

  """All values that are contained in given list."""
  hire_date_in: [DateTime!]

  """All values that are not contained in given list."""
  hire_date_not_in: [DateTime!]

  """All values less than the given value."""
  hire_date_lt: DateTime

  """All values less than or equal the given value."""
  hire_date_lte: DateTime

  """All values greater than the given value."""
  hire_date_gt: DateTime

  """All values greater than or equal the given value."""
  hire_date_gte: DateTime
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  base_salary: Float

  """All values that are not equal to given value."""
  base_salary_not: Float

  """All values that are contained in given list."""
  base_salary_in: [Float!]

  """All values that are not contained in given list."""
  base_salary_not_in: [Float!]

  """All values less than the given value."""
  base_salary_lt: Float

  """All values less than or equal the given value."""
  base_salary_lte: Float

  """All values greater than the given value."""
  base_salary_gt: Float

  """All values greater than or equal the given value."""
  base_salary_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
}

type EmployeeSubscriptionPayload {
  mutation: MutationType!
  node: Employee
  updatedFields: [String!]
  previousValues: EmployeePreviousValues
}

input EmployeeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployeeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EmployeeWhereInput
}

input EmployeeUpdateDataInput {
  first_name: String
  last_name: String
  legal_id: String
  hire_date: DateTime
  active: Boolean
  email: String
  base_salary: Float
  salaries: SalaryUpdateManyInput
  company: CompanyEmbeddedUpdateOneInput
  config: PayrollConfigEmbeddedUpdateOneInput
  createdBy: UserUpdateOneRequiredInput
}

input EmployeeUpdateInput {
  first_name: String
  last_name: String
  legal_id: String
  hire_date: DateTime
  active: Boolean
  email: String
  base_salary: Float
  salaries: SalaryUpdateManyInput
  company: CompanyEmbeddedUpdateOneInput
  config: PayrollConfigEmbeddedUpdateOneInput
  createdBy: UserUpdateOneRequiredInput
}

input EmployeeUpdateManyDataInput {
  first_name: String
  last_name: String
  legal_id: String
  hire_date: DateTime
  active: Boolean
  email: String
  base_salary: Float
}

input EmployeeUpdateManyInput {
  create: [EmployeeCreateInput!]
  connect: [EmployeeWhereUniqueInput!]
  set: [EmployeeWhereUniqueInput!]
  disconnect: [EmployeeWhereUniqueInput!]
  delete: [EmployeeWhereUniqueInput!]
  update: [EmployeeUpdateWithWhereUniqueNestedInput!]
  updateMany: [EmployeeUpdateManyWithWhereNestedInput!]
  deleteMany: [EmployeeScalarWhereInput!]
  upsert: [EmployeeUpsertWithWhereUniqueNestedInput!]
}

input EmployeeUpdateManyMutationInput {
  first_name: String
  last_name: String
  legal_id: String
  hire_date: DateTime
  active: Boolean
  email: String
  base_salary: Float
}

input EmployeeUpdateManyWithWhereNestedInput {
  where: EmployeeScalarWhereInput!
  data: EmployeeUpdateManyDataInput!
}

input EmployeeUpdateWithWhereUniqueNestedInput {
  where: EmployeeWhereUniqueInput!
  data: EmployeeUpdateDataInput!
}

input EmployeeUpsertWithWhereUniqueNestedInput {
  where: EmployeeWhereUniqueInput!
  update: EmployeeUpdateDataInput!
  create: EmployeeCreateInput!
}

input EmployeeWhereInput {
  """Logical AND on all given filters."""
  AND: [EmployeeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  first_name: String

  """All values that are not equal to given value."""
  first_name_not: String

  """All values that are contained in given list."""
  first_name_in: [String!]

  """All values that are not contained in given list."""
  first_name_not_in: [String!]

  """All values less than the given value."""
  first_name_lt: String

  """All values less than or equal the given value."""
  first_name_lte: String

  """All values greater than the given value."""
  first_name_gt: String

  """All values greater than or equal the given value."""
  first_name_gte: String

  """All values containing the given string."""
  first_name_contains: String

  """All values not containing the given string."""
  first_name_not_contains: String

  """All values starting with the given string."""
  first_name_starts_with: String

  """All values not starting with the given string."""
  first_name_not_starts_with: String

  """All values ending with the given string."""
  first_name_ends_with: String

  """All values not ending with the given string."""
  first_name_not_ends_with: String
  last_name: String

  """All values that are not equal to given value."""
  last_name_not: String

  """All values that are contained in given list."""
  last_name_in: [String!]

  """All values that are not contained in given list."""
  last_name_not_in: [String!]

  """All values less than the given value."""
  last_name_lt: String

  """All values less than or equal the given value."""
  last_name_lte: String

  """All values greater than the given value."""
  last_name_gt: String

  """All values greater than or equal the given value."""
  last_name_gte: String

  """All values containing the given string."""
  last_name_contains: String

  """All values not containing the given string."""
  last_name_not_contains: String

  """All values starting with the given string."""
  last_name_starts_with: String

  """All values not starting with the given string."""
  last_name_not_starts_with: String

  """All values ending with the given string."""
  last_name_ends_with: String

  """All values not ending with the given string."""
  last_name_not_ends_with: String
  legal_id: String

  """All values that are not equal to given value."""
  legal_id_not: String

  """All values that are contained in given list."""
  legal_id_in: [String!]

  """All values that are not contained in given list."""
  legal_id_not_in: [String!]

  """All values less than the given value."""
  legal_id_lt: String

  """All values less than or equal the given value."""
  legal_id_lte: String

  """All values greater than the given value."""
  legal_id_gt: String

  """All values greater than or equal the given value."""
  legal_id_gte: String

  """All values containing the given string."""
  legal_id_contains: String

  """All values not containing the given string."""
  legal_id_not_contains: String

  """All values starting with the given string."""
  legal_id_starts_with: String

  """All values not starting with the given string."""
  legal_id_not_starts_with: String

  """All values ending with the given string."""
  legal_id_ends_with: String

  """All values not ending with the given string."""
  legal_id_not_ends_with: String
  hire_date: DateTime

  """All values that are not equal to given value."""
  hire_date_not: DateTime

  """All values that are contained in given list."""
  hire_date_in: [DateTime!]

  """All values that are not contained in given list."""
  hire_date_not_in: [DateTime!]

  """All values less than the given value."""
  hire_date_lt: DateTime

  """All values less than or equal the given value."""
  hire_date_lte: DateTime

  """All values greater than the given value."""
  hire_date_gt: DateTime

  """All values greater than or equal the given value."""
  hire_date_gte: DateTime
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  base_salary: Float

  """All values that are not equal to given value."""
  base_salary_not: Float

  """All values that are contained in given list."""
  base_salary_in: [Float!]

  """All values that are not contained in given list."""
  base_salary_not_in: [Float!]

  """All values less than the given value."""
  base_salary_lt: Float

  """All values less than or equal the given value."""
  base_salary_lte: Float

  """All values greater than the given value."""
  base_salary_gt: Float

  """All values greater than or equal the given value."""
  base_salary_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  salaries_some: SalaryWhereInput
  salaries_every: SalaryRestrictedWhereInput
  salaries_none: SalaryRestrictedWhereInput
  company: CompanyEmbeddedWhereInput
  config: PayrollConfigEmbeddedWhereInput
  createdBy: UserWhereInput
}

input EmployeeWhereUniqueInput {
  id: ID
  legal_id: String
  email: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createCompany(data: CompanyCreateInput!): Company!
  createPayrollConfig(data: PayrollConfigCreateInput!): PayrollConfig!
  createPayrollRegistry(data: PayrollRegistryCreateInput!): PayrollRegistry!
  createEmployee(data: EmployeeCreateInput!): Employee!
  createUser(data: UserCreateInput!): User!
  createPayrollType(data: PayrollTypeCreateInput!): PayrollType!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updatePayrollConfig(data: PayrollConfigUpdateInput!, where: PayrollConfigWhereUniqueInput!): PayrollConfig
  updatePayrollRegistry(data: PayrollRegistryUpdateInput!, where: PayrollRegistryWhereUniqueInput!): PayrollRegistry
  updateEmployee(data: EmployeeUpdateInput!, where: EmployeeWhereUniqueInput!): Employee
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePayrollType(data: PayrollTypeUpdateInput!, where: PayrollTypeWhereUniqueInput!): PayrollType
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deletePayrollConfig(where: PayrollConfigWhereUniqueInput!): PayrollConfig
  deletePayrollRegistry(where: PayrollRegistryWhereUniqueInput!): PayrollRegistry
  deleteEmployee(where: EmployeeWhereUniqueInput!): Employee
  deleteUser(where: UserWhereUniqueInput!): User
  deletePayrollType(where: PayrollTypeWhereUniqueInput!): PayrollType
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  upsertPayrollConfig(where: PayrollConfigWhereUniqueInput!, create: PayrollConfigCreateInput!, update: PayrollConfigUpdateInput!): PayrollConfig!
  upsertPayrollRegistry(where: PayrollRegistryWhereUniqueInput!, create: PayrollRegistryCreateInput!, update: PayrollRegistryUpdateInput!): PayrollRegistry!
  upsertEmployee(where: EmployeeWhereUniqueInput!, create: EmployeeCreateInput!, update: EmployeeUpdateInput!): Employee!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPayrollType(where: PayrollTypeWhereUniqueInput!, create: PayrollTypeCreateInput!, update: PayrollTypeUpdateInput!): PayrollType!
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  updateManyPayrollConfigs(data: PayrollConfigUpdateManyMutationInput!, where: PayrollConfigWhereInput): BatchPayload!
  updateManyPayrollRegistries(data: PayrollRegistryUpdateManyMutationInput!, where: PayrollRegistryWhereInput): BatchPayload!
  updateManyEmployees(data: EmployeeUpdateManyMutationInput!, where: EmployeeWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyPayrollTypes(data: PayrollTypeUpdateManyMutationInput!, where: PayrollTypeWhereInput): BatchPayload!
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  deleteManyPayrollConfigs(where: PayrollConfigWhereInput): BatchPayload!
  deleteManyPayrollRegistries(where: PayrollRegistryWhereInput): BatchPayload!
  deleteManyEmployees(where: EmployeeWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPayrollTypes(where: PayrollTypeWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PayrollConfig implements Node {
  id: ID!
  name: String!
  types(where: PayrollTypeWhereInput, orderBy: PayrollTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PayrollType!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type PayrollConfigConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PayrollConfigEdge]!
  aggregate: AggregatePayrollConfig!
}

input PayrollConfigCreateInput {
  id: ID
  name: String!
  types: PayrollTypeCreateManyInput
}

"""An edge in a connection."""
type PayrollConfigEdge {
  """The item at the end of the edge."""
  node: PayrollConfig!

  """A cursor for use in pagination."""
  cursor: String!
}

type PayrollConfigEmbedded implements Node {
  id: ID!
  name: String!
  types(where: PayrollTypeWhereInput, orderBy: PayrollTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PayrollType!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

input PayrollConfigEmbeddedCreateInput {
  id: ID
  name: String!
  types: PayrollTypeCreateManyInput
}

input PayrollConfigEmbeddedCreateOneInput {
  create: PayrollConfigEmbeddedCreateInput
}

input PayrollConfigEmbeddedUpdateDataInput {
  name: String
  types: PayrollTypeUpdateManyInput
}

input PayrollConfigEmbeddedUpdateOneInput {
  create: PayrollConfigEmbeddedCreateInput
  delete: Boolean
  update: PayrollConfigEmbeddedUpdateDataInput
  upsert: PayrollConfigEmbeddedUpsertNestedInput
}

input PayrollConfigEmbeddedUpdateOneRequiredInput {
  create: PayrollConfigEmbeddedCreateInput
  update: PayrollConfigEmbeddedUpdateDataInput
  upsert: PayrollConfigEmbeddedUpsertNestedInput
}

input PayrollConfigEmbeddedUpsertNestedInput {
  update: PayrollConfigEmbeddedUpdateDataInput!
  create: PayrollConfigEmbeddedCreateInput!
}

input PayrollConfigEmbeddedWhereInput {
  """Logical AND on all given filters."""
  AND: [PayrollConfigEmbeddedWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  types_some: PayrollTypeWhereInput
}

enum PayrollConfigOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PayrollConfigPreviousValues {
  id: ID!
  name: String!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type PayrollConfigSubscriptionPayload {
  mutation: MutationType!
  node: PayrollConfig
  updatedFields: [String!]
  previousValues: PayrollConfigPreviousValues
}

input PayrollConfigSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PayrollConfigSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PayrollConfigWhereInput
}

input PayrollConfigUpdateInput {
  name: String
  types: PayrollTypeUpdateManyInput
}

input PayrollConfigUpdateManyMutationInput {
  name: String
}

input PayrollConfigWhereInput {
  """Logical AND on all given filters."""
  AND: [PayrollConfigWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  types_some: PayrollTypeWhereInput
}

input PayrollConfigWhereUniqueInput {
  id: ID
}

type PayrollRegistry implements Node {
  id: ID!
  name: String!
  active: Boolean!
  company: CompanyEmbedded!
  config: PayrollConfigEmbedded!
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee!]
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type PayrollRegistryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PayrollRegistryEdge]!
  aggregate: AggregatePayrollRegistry!
}

input PayrollRegistryCreateInput {
  id: ID
  name: String!
  active: Boolean
  company: CompanyEmbeddedCreateOneInput!
  config: PayrollConfigEmbeddedCreateOneInput!
  employees: EmployeeCreateManyInput
}

"""An edge in a connection."""
type PayrollRegistryEdge {
  """The item at the end of the edge."""
  node: PayrollRegistry!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PayrollRegistryOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  active_ASC
  active_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PayrollRegistryPreviousValues {
  id: ID!
  name: String!
  active: Boolean!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type PayrollRegistrySubscriptionPayload {
  mutation: MutationType!
  node: PayrollRegistry
  updatedFields: [String!]
  previousValues: PayrollRegistryPreviousValues
}

input PayrollRegistrySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PayrollRegistrySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PayrollRegistryWhereInput
}

input PayrollRegistryUpdateInput {
  name: String
  active: Boolean
  company: CompanyEmbeddedUpdateOneRequiredInput
  config: PayrollConfigEmbeddedUpdateOneRequiredInput
  employees: EmployeeUpdateManyInput
}

input PayrollRegistryUpdateManyMutationInput {
  name: String
  active: Boolean
}

input PayrollRegistryWhereInput {
  """Logical AND on all given filters."""
  AND: [PayrollRegistryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  active: Boolean

  """All values that are not equal to given value."""
  active_not: Boolean
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  company: CompanyEmbeddedWhereInput
  config: PayrollConfigEmbeddedWhereInput
  employees_some: EmployeeWhereInput
}

input PayrollRegistryWhereUniqueInput {
  id: ID
}

type PayrollType implements Node {
  id: ID!
  type: String!
  operator: String!
  value: Float!
}

"""A connection to a list of items."""
type PayrollTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PayrollTypeEdge]!
  aggregate: AggregatePayrollType!
}

input PayrollTypeCreateInput {
  id: ID
  type: String!
  operator: String!
  value: Float!
}

input PayrollTypeCreateManyInput {
  create: [PayrollTypeCreateInput!]
  connect: [PayrollTypeWhereUniqueInput!]
}

"""An edge in a connection."""
type PayrollTypeEdge {
  """The item at the end of the edge."""
  node: PayrollType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PayrollTypeOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
  operator_ASC
  operator_DESC
  value_ASC
  value_DESC
}

type PayrollTypePreviousValues {
  id: ID!
  type: String!
  operator: String!
  value: Float!
}

input PayrollTypeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PayrollTypeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PayrollTypeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PayrollTypeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  operator: String

  """All values that are not equal to given value."""
  operator_not: String

  """All values that are contained in given list."""
  operator_in: [String!]

  """All values that are not contained in given list."""
  operator_not_in: [String!]

  """All values less than the given value."""
  operator_lt: String

  """All values less than or equal the given value."""
  operator_lte: String

  """All values greater than the given value."""
  operator_gt: String

  """All values greater than or equal the given value."""
  operator_gte: String

  """All values containing the given string."""
  operator_contains: String

  """All values not containing the given string."""
  operator_not_contains: String

  """All values starting with the given string."""
  operator_starts_with: String

  """All values not starting with the given string."""
  operator_not_starts_with: String

  """All values ending with the given string."""
  operator_ends_with: String

  """All values not ending with the given string."""
  operator_not_ends_with: String
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
}

type PayrollTypeSubscriptionPayload {
  mutation: MutationType!
  node: PayrollType
  updatedFields: [String!]
  previousValues: PayrollTypePreviousValues
}

input PayrollTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PayrollTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PayrollTypeWhereInput
}

input PayrollTypeUpdateDataInput {
  type: String
  operator: String
  value: Float
}

input PayrollTypeUpdateInput {
  type: String
  operator: String
  value: Float
}

input PayrollTypeUpdateManyDataInput {
  type: String
  operator: String
  value: Float
}

input PayrollTypeUpdateManyInput {
  create: [PayrollTypeCreateInput!]
  connect: [PayrollTypeWhereUniqueInput!]
  set: [PayrollTypeWhereUniqueInput!]
  disconnect: [PayrollTypeWhereUniqueInput!]
  delete: [PayrollTypeWhereUniqueInput!]
  update: [PayrollTypeUpdateWithWhereUniqueNestedInput!]
  updateMany: [PayrollTypeUpdateManyWithWhereNestedInput!]
  deleteMany: [PayrollTypeScalarWhereInput!]
  upsert: [PayrollTypeUpsertWithWhereUniqueNestedInput!]
}

input PayrollTypeUpdateManyMutationInput {
  type: String
  operator: String
  value: Float
}

input PayrollTypeUpdateManyWithWhereNestedInput {
  where: PayrollTypeScalarWhereInput!
  data: PayrollTypeUpdateManyDataInput!
}

input PayrollTypeUpdateWithWhereUniqueNestedInput {
  where: PayrollTypeWhereUniqueInput!
  data: PayrollTypeUpdateDataInput!
}

input PayrollTypeUpsertWithWhereUniqueNestedInput {
  where: PayrollTypeWhereUniqueInput!
  update: PayrollTypeUpdateDataInput!
  create: PayrollTypeCreateInput!
}

input PayrollTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [PayrollTypeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  type: String

  """All values that are not equal to given value."""
  type_not: String

  """All values that are contained in given list."""
  type_in: [String!]

  """All values that are not contained in given list."""
  type_not_in: [String!]

  """All values less than the given value."""
  type_lt: String

  """All values less than or equal the given value."""
  type_lte: String

  """All values greater than the given value."""
  type_gt: String

  """All values greater than or equal the given value."""
  type_gte: String

  """All values containing the given string."""
  type_contains: String

  """All values not containing the given string."""
  type_not_contains: String

  """All values starting with the given string."""
  type_starts_with: String

  """All values not starting with the given string."""
  type_not_starts_with: String

  """All values ending with the given string."""
  type_ends_with: String

  """All values not ending with the given string."""
  type_not_ends_with: String
  operator: String

  """All values that are not equal to given value."""
  operator_not: String

  """All values that are contained in given list."""
  operator_in: [String!]

  """All values that are not contained in given list."""
  operator_not_in: [String!]

  """All values less than the given value."""
  operator_lt: String

  """All values less than or equal the given value."""
  operator_lte: String

  """All values greater than the given value."""
  operator_gt: String

  """All values greater than or equal the given value."""
  operator_gte: String

  """All values containing the given string."""
  operator_contains: String

  """All values not containing the given string."""
  operator_not_contains: String

  """All values starting with the given string."""
  operator_starts_with: String

  """All values not starting with the given string."""
  operator_not_starts_with: String

  """All values ending with the given string."""
  operator_ends_with: String

  """All values not ending with the given string."""
  operator_not_ends_with: String
  value: Float

  """All values that are not equal to given value."""
  value_not: Float

  """All values that are contained in given list."""
  value_in: [Float!]

  """All values that are not contained in given list."""
  value_not_in: [Float!]

  """All values less than the given value."""
  value_lt: Float

  """All values less than or equal the given value."""
  value_lte: Float

  """All values greater than the given value."""
  value_gt: Float

  """All values greater than or equal the given value."""
  value_gte: Float
}

input PayrollTypeWhereUniqueInput {
  id: ID
}

enum Permission {
  ADMIN
  USER
  ITEMCREATE
  ITEMUPDATE
  ITEMDELETE
  PERMISSIONUPDATE
}

type Query {
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  payrollConfigs(where: PayrollConfigWhereInput, orderBy: PayrollConfigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PayrollConfig]!
  payrollRegistries(where: PayrollRegistryWhereInput, orderBy: PayrollRegistryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PayrollRegistry]!
  employees(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Employee]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  payrollTypes(where: PayrollTypeWhereInput, orderBy: PayrollTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PayrollType]!
  company(where: CompanyWhereUniqueInput!): Company
  payrollConfig(where: PayrollConfigWhereUniqueInput!): PayrollConfig
  payrollRegistry(where: PayrollRegistryWhereUniqueInput!): PayrollRegistry
  employee(where: EmployeeWhereUniqueInput!): Employee
  user(where: UserWhereUniqueInput!): User
  payrollType(where: PayrollTypeWhereUniqueInput!): PayrollType
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  payrollConfigsConnection(where: PayrollConfigWhereInput, orderBy: PayrollConfigOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PayrollConfigConnection!
  payrollRegistriesConnection(where: PayrollRegistryWhereInput, orderBy: PayrollRegistryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PayrollRegistryConnection!
  employeesConnection(where: EmployeeWhereInput, orderBy: EmployeeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EmployeeConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  payrollTypesConnection(where: PayrollTypeWhereInput, orderBy: PayrollTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PayrollTypeConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Salary {
  title: String
  base_value: Float!
  increases: Float
  decreases: Float
  total: Float
  createdAt: DateTime!
}

input SalaryCreateInput {
  title: String
  base_value: Float!
  increases: Float
  decreases: Float
  total: Float
}

input SalaryCreateManyInput {
  create: [SalaryCreateInput!]
}

input SalaryRestrictedWhereInput {
  """Logical AND on all given filters."""
  AND: [SalaryRestrictedWhereInput!]
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  base_value: Float

  """All values that are not equal to given value."""
  base_value_not: Float

  """All values that are contained in given list."""
  base_value_in: [Float!]

  """All values that are not contained in given list."""
  base_value_not_in: [Float!]

  """All values less than the given value."""
  base_value_lt: Float

  """All values less than or equal the given value."""
  base_value_lte: Float

  """All values greater than the given value."""
  base_value_gt: Float

  """All values greater than or equal the given value."""
  base_value_gte: Float
  increases: Float

  """All values that are not equal to given value."""
  increases_not: Float

  """All values that are contained in given list."""
  increases_in: [Float!]

  """All values that are not contained in given list."""
  increases_not_in: [Float!]

  """All values less than the given value."""
  increases_lt: Float

  """All values less than or equal the given value."""
  increases_lte: Float

  """All values greater than the given value."""
  increases_gt: Float

  """All values greater than or equal the given value."""
  increases_gte: Float
  decreases: Float

  """All values that are not equal to given value."""
  decreases_not: Float

  """All values that are contained in given list."""
  decreases_in: [Float!]

  """All values that are not contained in given list."""
  decreases_not_in: [Float!]

  """All values less than the given value."""
  decreases_lt: Float

  """All values less than or equal the given value."""
  decreases_lte: Float

  """All values greater than the given value."""
  decreases_gt: Float

  """All values greater than or equal the given value."""
  decreases_gte: Float
  total: Float

  """All values that are not equal to given value."""
  total_not: Float

  """All values that are contained in given list."""
  total_in: [Float!]

  """All values that are not contained in given list."""
  total_not_in: [Float!]

  """All values less than the given value."""
  total_lt: Float

  """All values less than or equal the given value."""
  total_lte: Float

  """All values greater than the given value."""
  total_gt: Float

  """All values greater than or equal the given value."""
  total_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

input SalaryScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SalaryScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SalaryScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SalaryScalarWhereInput!]
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  base_value: Float

  """All values that are not equal to given value."""
  base_value_not: Float

  """All values that are contained in given list."""
  base_value_in: [Float!]

  """All values that are not contained in given list."""
  base_value_not_in: [Float!]

  """All values less than the given value."""
  base_value_lt: Float

  """All values less than or equal the given value."""
  base_value_lte: Float

  """All values greater than the given value."""
  base_value_gt: Float

  """All values greater than or equal the given value."""
  base_value_gte: Float
  increases: Float

  """All values that are not equal to given value."""
  increases_not: Float

  """All values that are contained in given list."""
  increases_in: [Float!]

  """All values that are not contained in given list."""
  increases_not_in: [Float!]

  """All values less than the given value."""
  increases_lt: Float

  """All values less than or equal the given value."""
  increases_lte: Float

  """All values greater than the given value."""
  increases_gt: Float

  """All values greater than or equal the given value."""
  increases_gte: Float
  decreases: Float

  """All values that are not equal to given value."""
  decreases_not: Float

  """All values that are contained in given list."""
  decreases_in: [Float!]

  """All values that are not contained in given list."""
  decreases_not_in: [Float!]

  """All values less than the given value."""
  decreases_lt: Float

  """All values less than or equal the given value."""
  decreases_lte: Float

  """All values greater than the given value."""
  decreases_gt: Float

  """All values greater than or equal the given value."""
  decreases_gte: Float
  total: Float

  """All values that are not equal to given value."""
  total_not: Float

  """All values that are contained in given list."""
  total_in: [Float!]

  """All values that are not contained in given list."""
  total_not_in: [Float!]

  """All values less than the given value."""
  total_lt: Float

  """All values less than or equal the given value."""
  total_lte: Float

  """All values greater than the given value."""
  total_gt: Float

  """All values greater than or equal the given value."""
  total_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

input SalaryUpdateManyDataInput {
  title: String
  base_value: Float
  increases: Float
  decreases: Float
  total: Float
}

input SalaryUpdateManyInput {
  create: [SalaryCreateInput!]
  updateMany: [SalaryUpdateManyWithWhereNestedInput!]
  deleteMany: [SalaryScalarWhereInput!]
}

input SalaryUpdateManyWithWhereNestedInput {
  where: SalaryScalarWhereInput!
  data: SalaryUpdateManyDataInput!
}

input SalaryWhereInput {
  """Logical AND on all given filters."""
  AND: [SalaryWhereInput!]
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  base_value: Float

  """All values that are not equal to given value."""
  base_value_not: Float

  """All values that are contained in given list."""
  base_value_in: [Float!]

  """All values that are not contained in given list."""
  base_value_not_in: [Float!]

  """All values less than the given value."""
  base_value_lt: Float

  """All values less than or equal the given value."""
  base_value_lte: Float

  """All values greater than the given value."""
  base_value_gt: Float

  """All values greater than or equal the given value."""
  base_value_gte: Float
  increases: Float

  """All values that are not equal to given value."""
  increases_not: Float

  """All values that are contained in given list."""
  increases_in: [Float!]

  """All values that are not contained in given list."""
  increases_not_in: [Float!]

  """All values less than the given value."""
  increases_lt: Float

  """All values less than or equal the given value."""
  increases_lte: Float

  """All values greater than the given value."""
  increases_gt: Float

  """All values greater than or equal the given value."""
  increases_gte: Float
  decreases: Float

  """All values that are not equal to given value."""
  decreases_not: Float

  """All values that are contained in given list."""
  decreases_in: [Float!]

  """All values that are not contained in given list."""
  decreases_not_in: [Float!]

  """All values less than the given value."""
  decreases_lt: Float

  """All values less than or equal the given value."""
  decreases_lte: Float

  """All values greater than the given value."""
  decreases_gt: Float

  """All values greater than or equal the given value."""
  decreases_gte: Float
  total: Float

  """All values that are not equal to given value."""
  total_not: Float

  """All values that are contained in given list."""
  total_in: [Float!]

  """All values that are not contained in given list."""
  total_not_in: [Float!]

  """All values less than the given value."""
  total_lt: Float

  """All values less than or equal the given value."""
  total_lte: Float

  """All values greater than the given value."""
  total_gt: Float

  """All values greater than or equal the given value."""
  total_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

type Subscription {
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  payrollConfig(where: PayrollConfigSubscriptionWhereInput): PayrollConfigSubscriptionPayload
  payrollRegistry(where: PayrollRegistrySubscriptionWhereInput): PayrollRegistrySubscriptionPayload
  employee(where: EmployeeSubscriptionWhereInput): EmployeeSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  payrollType(where: PayrollTypeSubscriptionWhereInput): PayrollTypeSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
